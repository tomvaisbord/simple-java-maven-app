name: CI/CD Development Pipeline

on:
  push:
    branches:
      - development
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Install Maven 3.9.2
      run: |
        wget https://archive.apache.org/dist/maven/maven-3/3.9.2/binaries/apache-maven-3.9.2-bin.tar.gz
        tar -xzf apache-maven-3.9.2-bin.tar.gz
        sudo mv apache-maven-3.9.2 /usr/local/apache-maven
        echo "MAVEN_HOME=/usr/local/apache-maven" >> $GITHUB_ENV
        echo "/usr/local/apache-maven/bin" >> $GITHUB_PATH

    - name: Get current version from git tags
      id: get_version
      run: |
        git fetch --tags
        LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "")
        if [ -z "$LATEST_TAG" ]; then
          echo "No tags found, setting default version to 0"
          LATEST_TAG="v0"
        fi
        echo "LATEST_TAG=$LATEST_TAG"
        echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
        echo "::set-output name=latest_tag::$LATEST_TAG"

    - name: Increment version
      id: increment_version
      run: |
        VERSION=${{ steps.get_version.outputs.latest_tag }}
        VERSION=${VERSION#v}
        NEW_VERSION=$((VERSION + 1))
        echo "NEW_VERSION=$NEW_VERSION"
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "::set-output name=new_version::$NEW_VERSION"

    - name: Create new git tag
      run: |
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'
        git tag -a "v${{ steps.increment_version.outputs.new_version }}" -m "Release version ${{ steps.increment_version.outputs.new_version }}"
        git push origin "v${{ steps.increment_version.outputs.new_version }}"

    - name: Build with Maven
      run: mvn clean package -DskipTests

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      run: |
        VERSION=${{ steps.increment_version.outputs.new_version }}
        docker build -t tomvais/myapp-developement:$VERSION --build-arg VERSION=$VERSION -f Dockerfile .

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push Docker image
      run: |
        VERSION=${{ steps.increment_version.outputs.new_version }}
        docker tag tomvais/myapp-developement:$VERSION tomvais/myapp-developement:$VERSION
        docker push tomvais/myapp-developement:$VERSION

    - name: Upload JAR file
      uses: actions/upload-artifact@v3
      with:
        name: myapp-jar
        path: target/*.jar
