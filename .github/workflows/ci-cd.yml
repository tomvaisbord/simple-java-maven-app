name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Install Maven 3.9.2
      run: |
        wget https://archive.apache.org/dist/maven/maven-3/3.9.2/binaries/apache-maven-3.9.2-bin.tar.gz
        tar -xzf apache-maven-3.9.2-bin.tar.gz
        sudo mv apache-maven-3.9.2 /usr/local/apache-maven
        echo "MAVEN_HOME=/usr/local/apache-maven" >> $GITHUB_ENV
        echo "/usr/local/apache-maven/bin" >> $GITHUB_PATH

    - name: Build with Maven
      run: mvn clean package -DskipTests

    - name: Run Snyk Maven Dependency Scan
      uses: snyk/actions/maven-3-jdk-17@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        JAVA_HOME: ${{ steps.setup-java.outputs.java-home }}
      with:
        args: --severity-threshold=high --fail-on=all

    - name: Lint Dockerfile with Hadolint (Docker)
      run: docker run --rm -i hadolint/hadolint < Dockerfile

    - name: Get current version from git tags
      id: get_version
      run: |
        git fetch --tags
        LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "")
        if [ -z "$LATEST_TAG" ]; then
          echo "No tags found, setting default version to 1.0.0"
          LATEST_TAG="v1.0.0"
        fi
        echo "LATEST_TAG=$LATEST_TAG"
        echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
        echo "::set-output name=latest_tag::$LATEST_TAG"

    - name: Increment version
      id: increment_version
      run: |
        VERSION=${{ steps.get_version.outputs.latest_tag }}
        VERSION=${VERSION#v}
        if [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
          NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$((${VERSION_PARTS[2]} + 1))"
        else
          NEW_VERSION="1.0.0"
        fi
        echo "NEW_VERSION=$NEW_VERSION"
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "::set-output name=new_version::$NEW_VERSION"

    - name: Create new git tag
      run: |
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'
        TAG_NAME="v${{ steps.increment_version.outputs.new_version }}"
        if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
          echo "Tag $TAG_NAME already exists. Skipping tag creation."
        else
          git tag -a "$TAG_NAME" -m "Release version $TAG_NAME"
          git push origin "$TAG_NAME"
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      run: |
        VERSION=${{ steps.increment_version.outputs.new_version }}
        docker build -t myapp:$VERSION --build-arg VERSION=$VERSION -f Dockerfile .

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push Docker image and capture digest
      run: |
        VERSION=${{ steps.increment_version.outputs.new_version }}
        digest=$(docker push ${{ secrets.DOCKER_USERNAME }}/myapp:$VERSION | tail -1 | awk '{print $3}')
        echo "digest=$digest" >> $GITHUB_ENV

    # Cosign integration begins here
    - name: Install Cosign
      uses: sigstore/cosign-installer@v3.6.0

    - name: Sign images with a key
      if: github.ref == 'refs/heads/master'
      run: |
        images="${{ secrets.DOCKER_USERNAME }}/simple-java-maven-app:${{ env.NEW_VERSION }}@${{ env.digest }}"
        cosign sign --yes --key env://COSIGN_PRIVATE_KEY ${images}
      env:
        COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
        COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        DIGEST: ${{ env.digest }}

    - name: Verify Docker image with Cosign
      run: |
        VERSION=${{ steps.increment_version.outputs.new_version }}
        cosign verify ${{ secrets.DOCKER_USERNAME }}/myapp:$VERSION

    - name: Upload JAR file
      uses: actions/upload-artifact@v3
      with:
        name: myapp-jar
        path: target/*.jar

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.EC2_INSTANCE_REGION }}

    - name: Deploy Docker image to EC2
      run: |
        aws ssm send-command \
          --document-name "AWS-RunShellScript" \
          --targets "Key=instanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
          --parameters 'commands=["docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}", "docker pull ${{ secrets.DOCKER_USERNAME }}/myapp:${{ steps.increment_version.outputs.new_version }}", "docker stop myapp || true", "docker rm myapp || true", "docker run -d --name myapp ${{ secrets.DOCKER_USERNAME }}/myapp:${{ steps.increment_version.outputs.new_version }}"]' \
          --timeout-seconds 600 \
          --max-concurrency "50" \
          --max-errors "0" \
          --region ${{ secrets.EC2_INSTANCE_REGION }}
